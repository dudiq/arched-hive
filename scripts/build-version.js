/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable no-console */
// read `git.commit` file, if .git is not available

const fs = require('fs')
const cp = require('child_process')
const pkg = require('../package.json')

const sourcePath = './src'

function log(...args) {
  console.log('[build-version]: ', ...args)
}

function getChangeset(str) {
  const lines = str.split('\n')
  let changeset = ''
  for (let i = 0, l = lines.length; i < l; i++) {
    const item = lines[i]
    if (item.indexOf('commit') === 0) {
      const sets = item.split(' ')
      changeset = sets[sets.length - 1]
      break
    }
  }
  return changeset
}

function emptyWrite() {
  log('change set is not found, writing empty change set')
  writeBuildModule('')
}

function writeBuildModule(changeset) {
  const buildTime = new Date()
  const content = `// //autogenerated by /build-version.js PLEASE, DO NOT MODIFY!!!
export const buildVersion = {
  appName: '${pkg.appName}',
  version: '${pkg.version}',
  changeset: '${changeset}',
  buildTime: new Date(${buildTime.getTime()}), // '${buildTime.toString()}',
};
`

  fs.writeFile(`${sourcePath}/build-version.ts`, content, (err) => {
    if (!err) {
      log(`${sourcePath}/generated/build.version.auto.js is created`)
    } else {
      log("can't create src/build.version.auto.js, something goes wrong...")
      console.error(err)
      process.exit(1)
    }
  })
}

function readCommitFile() {
  fs.readFile('./git.commit', (err, data) => {
    if (err) {
      emptyWrite()
    } else {
      const value = data.toString()
      const str = getChangeset(value)
      log(`using git.commit file. changeset: ${str}`)
      writeBuildModule(str)
    }
  })
}

function getBuildInfo() {
  // git log -1 | head -n 1 | sed 's/commit //'
  const dataProcess = cp.spawn('git', ['log', '-1'], {
    silent: false,
  })

  dataProcess.stdout.on('data', (data) => {
    const str = data.toString()
    const changeset = getChangeset(str)
    log(`using git cli. changeset: ${changeset}`)
    writeBuildModule(changeset)
  })

  // process default error
  dataProcess.stderr.on('data', () => {
    // no git, or error processed
    // try read defined file
    readCommitFile()
  })
}

getBuildInfo()
